{"version":3,"sources":["components/RoomList.js","components/MessageList.js","components/User.js","App.js","serviceWorker.js","index.js"],"names":["RoomList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rooms","newRoomName","handleChange","bind","assertThisInitialized","handleSubmit","roomsRef","firebase","database","ref","_this2","on","snapshot","room","val","key","setState","concat","e","target","value","preventDefault","push","name","_this3","react_default","a","createElement","className","activeRoom","map","index","onClick","changeActiveRoom","id","onSubmit","type","placeholder","onChange","Component","MessageList","username","content","sentAt","roomId","messages","messagesRef","createMessage","handleMessageSubmit","currentUser","user","displayName","ServerValue","TIMESTAMP","time","date","Date","year","getFullYear","getMonth","getDate","getHours","addZero","getMinutes","getSeconds","timeCount","filter","message","sort","b","formatTime","User","signIn","signOut","provider","auth","GoogleAuthProvider","signInWithPopup","onAuthStateChanged","setUser","activeUser","toggleButton","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","console","log","components_RoomList","passRoomId","components_MessageList","components_User","passUser","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f2d0924.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass RoomList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rooms: [],\r\n      newRoomName: \"\",\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.roomsRef = this.props.firebase.database().ref('rooms')\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    this.roomsRef.on('child_added', snapshot => {\r\n\r\n      const room = snapshot.val();\r\n      room.key = snapshot.key;\r\n      this.setState({ rooms: this.state.rooms.concat( room ) });\r\n\r\n    });\r\n  }\r\n\r\n\r\n\r\n  handleChange(e) {\r\n    this.setState({ newRoomName: e.target.value })\r\n  }\r\n\r\n\r\n  handleSubmit(e) {\r\n\r\n    e.preventDefault();\r\n    if (!this.state.newRoomName) return\r\n    this.roomsRef.push({ name: this.state.newRoomName })\r\n    this.setState({ newRoomName: ''})\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n      return (\r\n\r\n    <div className = \"column-1\">\r\n\r\n      <div className=\"room-list\">\r\n\r\n          <section>\r\n\r\n            <p className = \"room-name\"> {this.props.activeRoom ? this.props.activeRoom.name : 'Join Chat Room' } </p>\r\n\r\n              {this.state.rooms.map((room, index) =>\r\n\r\n              <li className = \"room-list-item\" key = {index} onClick = {() => this.props.changeActiveRoom(room)}>\r\n\r\n                {room.name}\r\n\r\n              </li>\r\n\r\n               )}\r\n\r\n            </section>\r\n\r\n\r\n        <div id = \"new-room\">\r\n\r\n            <form onSubmit = { (e) => this.handleSubmit(e) }>\r\n\r\n              <label>\r\n\r\n                <div id = \"create-room\"> Create Chat Room </div>\r\n\r\n                  <input\r\n                    type = \"text\"\r\n                    placeholder = \"Enter room name...\"\r\n                    value = {this.state.newRoomName}\r\n                    onChange = { (e) => this.handleChange(e) }/>\r\n\r\n               </label>\r\n\r\n              <div>\r\n              <input id = \"room-button\" type = \"submit\" value = \"Create\" />\r\n              </div>\r\n\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div> \r\n\r\n      );\r\n\r\n    }\r\n\r\n  }\r\n\r\nexport default RoomList;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass MessageList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      content: \"\",\r\n      sentAt: \"\",\r\n      roomId: \"\",\r\n      messages: []\r\n    }\r\n\r\n    this.messagesRef = this.props.firebase.database().ref(\"messages\");\r\n    this.createMessage=this.createMessage.bind(this);\r\n    this.handleMessageSubmit = this.handleMessageSubmit.bind(this);\r\n    this.handleChange=this.handleChange.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    this.messagesRef.on('child_added', snapshot => {\r\n      const messages = snapshot.val();\r\n      this.setState({ messages: this.state.messages.concat( messages ) });\r\n    });\r\n\r\n  }\r\n\r\n  handleChange(e) {\r\n\r\n     e.preventDefault();\r\n     const currentUser = this.props.user === null ? \"Guest\" : this.props.user.displayName;\r\n     this.setState({\r\n       username: currentUser,\r\n       content: e.target.value,\r\n       sentAt: this.props.firebase.database.ServerValue.TIMESTAMP,\r\n       roomId: this.props.activeRoom\r\n     })\r\n\r\n   }\r\n\r\n  createMessage(e) {\r\n\r\n     this.messagesRef.push({\r\n       username: this.state.username,\r\n       content: this.state.content,\r\n       sentAt: this.state.sentAt,\r\n       roomId: this.props.activeRoom.roomId\r\n     })\r\n\r\n     this.setState({\r\n       username: \"\",\r\n       content: \"\",\r\n       sentAt: \"\",\r\n       roomId: \"\"\r\n     })\r\n\r\n   }\r\n\r\n   handleMessageSubmit(e) {\r\n\r\n     e.preventDefault();\r\n     this.createMessage();\r\n     this.setState({\r\n       content: \"\",\r\n      });\r\n   }\r\n\r\n\r\n\r\n   formatTime(time) {\r\n\r\n      const date = new Date(time);\r\n      const year = date.getFullYear();\r\n      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n      const month = months[date.getMonth()];\r\n      const day = date.getDate();\r\n      const hour = date.getHours();\r\n      const min =  this.addZero(date.getMinutes());\r\n      const sec =  this.addZero(date.getSeconds());\r\n      const sentTime = month + ' ' + day + ' ' + year + ' ' + hour + ':' + min + ':' +  sec;\r\n      return sentTime;\r\n\r\n    }\r\n\r\n    addZero(timeCount){\r\n\r\n      if (timeCount < 10){\r\n        timeCount = \"0\" + timeCount\r\n      }\r\n\r\n      return timeCount\r\n    }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className = \"column-2\">\r\n\r\n        <div className = \"message-list\">\r\n\r\n          <section className = \"message-group\">\r\n\r\n            <div>\r\n\r\n              <h3>Current Messages</h3>\r\n\r\n                {this.state.messages.filter(message => message.roomId === this.props.activeRoom.roomId)\r\n                  .sort((a, b) => a.sentAt - b.sentAt)\r\n                  .map((message, index) =>\r\n\r\n                  <div key = {index}>\r\n                    <p className = \"message-align\">{message.username}:</p>\r\n                    <p className = \"message-content-align\">{message.content}</p>\r\n                    <p className = \"message-date-align\"> sent: {this.formatTime(message.sentAt)}</p>\r\n                  </div>\r\n                 )}\r\n\r\n            </div>\r\n\r\n          </section>\r\n\r\n          <div className = \"new-message\">\r\n\r\n            <form onSubmit={this.handleMessageSubmit}>\r\n\r\n              <input id = \"message-bar\" type = \"text\" value = {this.state.content} onChange = {this.handleChange} placeholder = \"Write your message here...\" />\r\n              <input id = \"message-button\" type = \"submit\" value = \"Send\"/>\r\n\r\n            </form>\r\n          </div>\r\n\r\n      </div>\r\n\r\n  </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList\r\n","import React, { Component } from 'react';\r\n\r\nclass User extends Component  {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      user: ''\r\n    };\r\n\r\n    this.signIn = this.signIn.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n\r\n  signIn() {\r\n    const provider = new this.props.firebase.auth.GoogleAuthProvider();\r\n    this.props.firebase.auth().signInWithPopup( provider );\r\n  }\r\n\r\n\r\n  signOut() {\r\n    this.props.firebase.auth().signOut();\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.firebase.auth().onAuthStateChanged(user => {\r\n      this.props.setUser(user);\r\n    })\r\n  }\r\n\r\n\r\n  toggleButton(){\r\n\r\n    if(this.props.user === null){\r\n\r\n      return <button type=\"button\" className=\"sign-in\" onClick={this.signIn}> Sign-in with Gmail</button>\r\n\r\n    } else {\r\n      return  <button type=\"button\" className=\"sign-off\" onClick={this.signOut}> Logout </button>\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const activeUser = this.props.user === null ? \"Guest\" : this.props.user.displayName;\r\n\r\n    return (\r\n\r\n    <div >\r\n\r\n      <div>\r\n        <span id = \"username\"> Signed-in as: {activeUser}</span>\r\n      </div>\r\n\r\n      <div>\r\n        {this.toggleButton()}\r\n      </div>\r\n\r\n    </div> \r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default User;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport * as firebase from 'firebase';\nimport RoomList from './components/RoomList';\nimport MessageList from './components/MessageList';\nimport User from './components/User';\n\nvar config = {\n  apiKey: \"AIzaSyDCDtnIu7Kq0xrX5PywOuzw9ndI7qECn9U\",\n  authDomain: \"bloc-chat-react-6af02.firebaseapp.com\",\n  databaseURL: \"https://bloc-chat-react-6af02.firebaseio.com\",\n  projectId: \"bloc-chat-react-6af02\",\n  storageBucket: \"bloc-chat-react-6af02.appspot.com\",\n  messagingSenderId: \"437627547858\"\n};\n\nfirebase.initializeApp(config);\n\n\nclass App extends Component {\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        activeRoom: '',\n        activeUser: ''\n      }\n\n      this.changeActiveRoom = this.changeActiveRoom.bind(this);\n      this.setUser = this.setUser.bind(this);\n    }\n\n    changeActiveRoom(room) {\n      this.setState({ activeRoom: room })\n      console.log(this.state.activeRoom)\n    }\n\n\n      setUser(user) {\n           this.setState({ activeUser: user })\n         }\n\n      passRoomId(roomId) {\n          this.setState({activeRoom: roomId})\n           }\n\n      passUser(username) {\n          this.setState({activeUser: username})\n           }\n\n\n    render () {\n\n      return (\n\n      <div className ='App'>\n\n          <div className = \"title\">\n            <header>\n              <h1> Chat Fiction </h1>\n            </header>\n          </div>\n\n\n          <main>\n\n            <section id = \"sidebar\">\n              <RoomList\n                firebase = {firebase}\n                activeRoom = {this.state.activeRoom}\n                changeActiveRoom = {this.changeActiveRoom}\n                passRoomId = {(roomId) => this.passRoomId(roomId)}\n              />\n            </section>\n\n            <section id = \"message room\">\n              <MessageList\n                firebase = {firebase}\n                activeRoom = {this.state.activeRoom}\n                user = {this.state.activeUser}\n                setUser = {this.setUser}\n              />\n            </section>\n\n          <section>\n            <User\n              firebase = {firebase}\n              setUser = {this.setUser}\n              user = {this.state.activeUser}\n              passUser = {(username) => this.passUser(username)}\n            />\n          </section>\n\n         </main>\n\n      </div>\n\n      );\n\n    }\n\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}